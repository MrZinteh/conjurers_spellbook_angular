{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, Subject } from 'rxjs';\nimport { FIND_FAMILIARS, SUMMON_FEY_BASE, SUMMON_SHADOWSPAWN_BASE, SUMMON_ABERRATION_BASE, SUMMON_CONSTRUCT_BASE, SUMMON_DRACONIC_SPIRITS_BASE, SUMMON_ELEMENTAL_BASE, SUMMON_FIEND_BASE, ELEMENTALS, DEMONS, DEVILS } from './conjurations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BackEndService = /*#__PURE__*/(() => {\n  class BackEndService {\n    constructor(http) {\n      this.http = http;\n      this.feySpiritsUrl = 'api/feySpirits';\n      this.lesserDemonsUrl = 'api/fiends/lesserDemons';\n      this.shadowSpiritsUrl = 'api/shadowSpirits';\n      this.minorElementalUrl = 'api/elementals/minor';\n      this.aberrationsUrl = 'api/aberrations';\n      this.constructsUrl = 'api/constructs';\n      this.elementalsUrl = 'api/elementals';\n      this.greaterDemonsUrl = 'api/fiends/greaterDemons';\n      this.devilsUrl = 'api/fiends/devils';\n      this.draconicSpiritsUrl = 'api/draconicSpirits';\n      this.fiendsUrl = 'api/fiends';\n      this.minionsUrl = 'api/minions';\n      this.conjurationsSource = new Subject();\n      this.conjurations$ = this.conjurationsSource.asObservable();\n      this.conjurations = {\n        \"Find Familiar\": FIND_FAMILIARS,\n        \"Summon Fey\": [],\n        \"Summon Lesser Demons\": [],\n        \"Summon Shadowspawn\": [],\n        \"Conjure Minor Elementals\": [],\n        \"Summon Aberration\": [],\n        \"Summon Construct\": [],\n        \"Summon Elemental\": [],\n        \"Summon Greater Demon\": [],\n        \"Conjure Elemental\": [],\n        \"Infernal Calling\": [],\n        \"Summon Draconic Spirit\": [],\n        \"Summon Fiend\": []\n      };\n      this.orderedConjurations = {\n        \"Find Familiar\": FIND_FAMILIARS,\n        \"Summon Fey\": [],\n        \"Summon Lesser Demons\": [],\n        \"Summon Shadowspawn\": [],\n        \"Conjure Minor Elementals\": [],\n        \"Summon Aberration\": [],\n        \"Summon Construct\": [],\n        \"Summon Elemental\": [],\n        \"Summon Greater Demon\": [],\n        \"Conjure Elemental\": [],\n        \"Infernal Calling\": [],\n        \"Summon Draconic Spirit\": [],\n        \"Summon Fiend\": []\n      };\n      this.filteredConjurations = {\n        \"Find Familiar\": FIND_FAMILIARS,\n        \"Summon Fey\": [],\n        \"Summon Lesser Demons\": [],\n        \"Summon Shadowspawn\": [],\n        \"Conjure Minor Elementals\": [],\n        \"Summon Aberration\": [],\n        \"Summon Construct\": [],\n        \"Summon Elemental\": [],\n        \"Summon Greater Demon\": [],\n        \"Conjure Elemental\": [],\n        \"Infernal Calling\": [],\n        \"Summon Draconic Spirit\": [],\n        \"Summon Fiend\": []\n      };\n      this.minionsSource = new Subject();\n      this.minions$ = this.minionsSource.asObservable();\n      this.minions = [];\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        })\n      };\n      this.selectedSpellSource = new Subject();\n      this.selectedSpell$ = this.selectedSpellSource.asObservable();\n      this.sortBySource = new Subject();\n      this.sortBy$ = this.sortBySource.asObservable();\n    }\n\n    selectSpell(spell) {\n      this.selectedSpellSource.next(spell);\n    }\n\n    sortConjures(sortedConjures, spell) {\n      this.orderedConjurations[spell] = sortedConjures;\n      this.conjurationsSource.next(this.orderedConjurations);\n    }\n\n    filterConjures(filterBy, filterText, spell) {\n      let filteredOrderedConjurations = this.orderedConjurations[spell];\n\n      if (filterBy === \"name\") {\n        filteredOrderedConjurations = filteredOrderedConjurations.filter(el => {\n          return el.name.toLowerCase().includes(filterText.toLowerCase());\n        });\n      } else if (filterBy === \"subName\") {\n        filteredOrderedConjurations = filteredOrderedConjurations.filter(el => {\n          if (el.stats.subName !== null) {\n            return el.stats.subName.toLowerCase().includes(filterText.toLowerCase());\n          } else {\n            return false;\n          }\n        });\n      }\n\n      this.filteredConjurations[spell] = filteredOrderedConjurations;\n      this.conjurationsSource.next(this.filteredConjurations);\n    }\n\n    initializeSortedConjures() {\n      this.orderedConjurations = this.conjurations;\n    }\n\n    getFeySpirits() {\n      return this.http.get(this.feySpiritsUrl);\n    }\n\n    getLesserDemons() {\n      return this.http.get(this.lesserDemonsUrl);\n    }\n\n    getShadowSpirits() {\n      return this.http.get(this.shadowSpiritsUrl);\n    }\n\n    getMinorElementals() {\n      return this.http.get(this.minorElementalUrl);\n    }\n\n    getAberrations() {\n      return this.http.get(this.aberrationsUrl);\n    }\n\n    getConstructs() {\n      return this.http.get(this.constructsUrl);\n    }\n\n    getElementals() {\n      return this.http.get(this.elementalsUrl);\n    }\n\n    getGreaterDemons() {\n      return this.http.get(this.greaterDemonsUrl);\n    }\n\n    getDevils() {\n      return this.http.get(this.devilsUrl);\n    }\n\n    getDraconicSpirits() {\n      return this.http.get(this.draconicSpiritsUrl);\n    }\n\n    getFiends() {\n      return this.http.get(this.fiendsUrl);\n    }\n\n    getMinions() {\n      return this.http.get(this.minionsUrl);\n    }\n\n    addMinion(minion) {\n      return this.http.post(this.minionsUrl, minion, this.httpOptions).pipe(catchError(e => new Observable(subscriber => {\n        console.log(e);\n        subscriber.next(e);\n      })));\n    }\n\n    deleteMinion(name) {\n      return this.http.delete(this.minionsUrl + '?name=' + name).pipe(catchError(e => new Observable(subscriber => {\n        console.log(e);\n        subscriber.next(e);\n      })));\n    }\n\n    minionMapper() {\n      this.minions = [];\n      this.getMinions().subscribe(minions => {\n        minions.forEach(minion => {\n          const name = minion.name;\n          const type = minion.type;\n          const spellSource = minion.spell_source;\n          const spell_conjures = this.conjurations[spellSource];\n          let conjuredMinion = spell_conjures[0];\n\n          for (const conjure of spell_conjures) {\n            if (conjure.name === name) {\n              conjuredMinion = conjure;\n            }\n          }\n\n          this.minions.push(conjuredMinion);\n        });\n        this.minionsSource.next(this.minions);\n      });\n    }\n\n    feySpiritMapper() {\n      this.getFeySpirits().subscribe(feySpirits => {\n        feySpirits.forEach(spirit => {\n          const name = spirit.name;\n          const type = spirit.type;\n          let base_fey = SUMMON_FEY_BASE[0];\n\n          for (const fey_type of SUMMON_FEY_BASE) {\n            if (fey_type.name === type) {\n              base_fey = fey_type;\n            }\n          }\n\n          const feySpirit = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_fey.stats), {\n              name: name\n            })\n          };\n          this.conjurations[\"Summon Fey\"].push(feySpirit);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    lesserDemonMapper() {\n      this.getLesserDemons().subscribe(lesserDemons => {\n        lesserDemons.forEach(demon => {\n          const name = demon.name;\n          const type = demon.type;\n          const cr = demon.cr.toString();\n          let base_demon = DEMONS[0];\n\n          for (const demon_ of DEMONS) {\n            if (demon_.name === name) {\n              base_demon = demon_;\n            }\n          }\n\n          const crMap = {\n            \"0.125\": \"1/8\",\n            \"0.25\": \"1/4\",\n            \"0.5\": \"1/2\"\n          };\n          const newCr = cr in crMap ? crMap[cr] : cr;\n          const lesserDemon = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_demon.stats), {\n              name: name,\n              subName: newCr\n            })\n          };\n          this.conjurations[\"Summon Lesser Demons\"].push(lesserDemon);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    shadowSpawnMapper() {\n      this.getShadowSpirits().subscribe(shadowSpirits => {\n        shadowSpirits.forEach(spirit => {\n          const name = spirit.name;\n          const type = spirit.type;\n          let base_shadow = SUMMON_SHADOWSPAWN_BASE[0];\n\n          for (const shadow_type of SUMMON_SHADOWSPAWN_BASE) {\n            if (shadow_type.name === type) {\n              base_shadow = shadow_type;\n            }\n          }\n\n          const shadowSpirit = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_shadow.stats), {\n              name: name\n            })\n          };\n          this.conjurations[\"Summon Shadowspawn\"].push(shadowSpirit);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    minorElementalMapper() {\n      this.getMinorElementals().subscribe(minorElementals => {\n        minorElementals.forEach(elemental => {\n          const name = elemental.name;\n          const type = elemental.type;\n          const cr = elemental.cr.toString();\n          let base_elemental = ELEMENTALS[0];\n\n          for (const elemental_ of ELEMENTALS) {\n            if (elemental_.name === name) {\n              base_elemental = elemental_;\n            }\n          }\n\n          const crMap = {\n            \"0.125\": \"1/8\",\n            \"0.25\": \"1/4\",\n            \"0.5\": \"1/2\"\n          };\n          const newCr = cr in crMap ? crMap[cr] : cr;\n          const minorElemental = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_elemental.stats), {\n              name: name,\n              subName: newCr\n            })\n          };\n          this.conjurations[\"Conjure Minor Elementals\"].push(minorElemental);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    aberrationMapper() {\n      this.getAberrations().subscribe(aberrations => {\n        aberrations.forEach(aberration => {\n          const name = aberration.name;\n          const type = aberration.type;\n          let base_aberration = SUMMON_ABERRATION_BASE[0];\n\n          for (const ab_type of SUMMON_ABERRATION_BASE) {\n            if (ab_type.name === type) {\n              base_aberration = ab_type;\n            }\n          }\n\n          const newAberration = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_aberration.stats), {\n              name: name\n            })\n          };\n          this.conjurations[\"Summon Aberration\"].push(newAberration);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    constructMapper() {\n      this.getConstructs().subscribe(constructs => {\n        constructs.forEach(construct => {\n          const name = construct.name;\n          const type = construct.type;\n          let base_construct = SUMMON_CONSTRUCT_BASE[0];\n\n          for (const construct_type of SUMMON_CONSTRUCT_BASE) {\n            if (construct_type.name === type) {\n              base_construct = construct_type;\n            }\n          }\n\n          const newConstruct = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_construct.stats), {\n              name: name\n            })\n          };\n          this.conjurations[\"Summon Construct\"].push(newConstruct);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    elementalSpiritMapper() {\n      this.getElementals().subscribe(elementals => {\n        elementals.forEach(elemental => {\n          const name = elemental.name;\n          const type = elemental.type;\n          let base_elemental = SUMMON_ELEMENTAL_BASE[0];\n\n          for (const elemental_type of SUMMON_ELEMENTAL_BASE) {\n            if (elemental_type.name === type) {\n              base_elemental = elemental_type;\n            }\n          }\n\n          const newElemental = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_elemental.stats), {\n              name: name\n            })\n          };\n          this.conjurations[\"Summon Elemental\"].push(newElemental);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    greaterDemonMapper() {\n      this.getGreaterDemons().subscribe(greaterDemons => {\n        greaterDemons.forEach(demon => {\n          const name = demon.name;\n          const type = demon.type;\n          const cr = demon.cr.toString();\n          let base_demon = DEMONS[0];\n\n          for (const demon_ of DEMONS) {\n            if (demon_.name === name) {\n              base_demon = demon_;\n            }\n          }\n\n          const crMap = {\n            \"0.125\": \"1/8\",\n            \"0.25\": \"1/4\",\n            \"0.5\": \"1/2\"\n          };\n          const newCr = cr in crMap ? crMap[cr] : cr;\n          const greaterDemon = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_demon.stats), {\n              name: name,\n              subName: newCr\n            })\n          };\n          this.conjurations[\"Summon Greater Demon\"].push(greaterDemon);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    elementalMapper() {\n      this.getElementals().subscribe(elementals => {\n        elementals.forEach(elemental => {\n          const name = elemental.name;\n          const type = elemental.type;\n          const cr = elemental.cr.toString();\n          let base_elemental = DEMONS[0];\n\n          for (const elemental_ of DEMONS) {\n            if (elemental_.name === name) {\n              base_elemental = elemental_;\n            }\n          }\n\n          const crMap = {\n            \"0.125\": \"1/8\",\n            \"0.25\": \"1/4\",\n            \"0.5\": \"1/2\"\n          };\n          const newCr = cr in crMap ? crMap[cr] : cr;\n          const conjuredElemental = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_elemental.stats), {\n              name: name,\n              subName: newCr\n            })\n          };\n          this.conjurations[\"Conjure Elemental\"].push(conjuredElemental);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    devilMapper() {\n      this.getDevils().subscribe(devils => {\n        devils.forEach(devil => {\n          const name = devil.name;\n          const type = devil.type;\n          const cr = devil.cr.toString();\n          let base_devil = DEVILS[0];\n\n          for (const devil_ of DEVILS) {\n            if (devil_.name === name) {\n              base_devil = devil_;\n            }\n          }\n\n          const crMap = {\n            \"0.125\": \"1/8\",\n            \"0.25\": \"1/4\",\n            \"0.5\": \"1/2\"\n          };\n          const newCr = cr in crMap ? crMap[cr] : cr;\n          const conjuredDevil = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_devil.stats), {\n              name: name,\n              subName: newCr\n            })\n          };\n          this.conjurations[\"Infernal Calling\"].push(conjuredDevil);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    draconicSpiritMapper() {\n      this.getDraconicSpirits().subscribe(spirits => {\n        spirits.forEach(spirit => {\n          const name = spirit.name;\n          const type = spirit.type;\n          let base_spirit = SUMMON_DRACONIC_SPIRITS_BASE[0];\n\n          for (const draconic_type of SUMMON_DRACONIC_SPIRITS_BASE) {\n            if (draconic_type.name === type) {\n              base_spirit = draconic_type;\n            }\n          }\n\n          const draconicSpirit = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_spirit.stats), {\n              name: name\n            })\n          };\n          this.conjurations[\"Summon Draconic Spirit\"].push(draconicSpirit);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n    fiendMapper() {\n      this.getFiends().subscribe(fiends => {\n        fiends.forEach(fiend => {\n          const name = fiend.name;\n          const type = fiend.type;\n          let base_spirit = SUMMON_FIEND_BASE[0];\n\n          for (const fiendish_type of SUMMON_FIEND_BASE) {\n            if (fiendish_type.name === type) {\n              base_spirit = fiendish_type;\n            }\n          }\n\n          const summonedFiend = {\n            name: name,\n            stats: Object.assign(Object.assign({}, base_spirit.stats), {\n              name: name\n            })\n          };\n          this.conjurations[\"Summon Fiend\"].push(summonedFiend);\n        });\n        this.conjurationsSource.next(this.conjurations);\n      });\n    }\n\n  }\n\n  BackEndService.ɵfac = function BackEndService_Factory(t) {\n    return new (t || BackEndService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BackEndService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackEndService,\n    factory: BackEndService.ɵfac,\n    providedIn: 'root'\n  });\n  return BackEndService;\n})();","map":null,"metadata":{},"sourceType":"module"}